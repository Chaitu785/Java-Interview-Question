Q) Compare two version numbers version1 and version2.

If version1 > version2 return 1,
If version1 < version2 return -1,
otherwise return 0.
You may assume that the version strings are non-empty and contain only digits and the . character.

The . character does not represent a decimal point and is used to separate number sequences.

For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

Here is an example of version numbers ordering:

0.1 < 1.1 < 1.2 < 1.13 < 1.13.4

coding solution

import java.util.*;

public class Solution {
    public int compareVersion(String v1, String v2) {
        ArrayList<String> a = new ArrayList<>(Arrays.asList(v1.split("[.]")));
        ArrayList<String> b = new ArrayList<>(Arrays.asList(v2.split("[.]")));

        while(a.size() > b.size()) b.add("0");
        while(a.size() < b.size()) a.add("0");

        // int i=0,j=0;

        for(int i=0,j=0; i<a.size() && j<b.size(); i++,j++){
            double d1 = Double.parseDouble(a.get(i));
            double d2 = Double.parseDouble(b.get(j));

            if(d1>d2) return 1;
            else if(d1<d2) return -1;
        }

        return 0;
    }
}
