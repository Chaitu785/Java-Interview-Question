Q). Given an integer array, sort it using the heapsort algorithm in Java.

Heapsort Overview :
         Heapsort is an in-place, comparison-based sorting algorithm and can be thought of as an improved selection sort as it divides the input into a sorted and 
         an unsorted region. It iteratively shrinks the unsorted region by extracting the largest/smallest element and moving that to the sorted region. 
         The improvement consists of using a heap data structure rather than a linear-time search to find the maximum. Heapsort does not produce a stable sort,
         which means that the implementation does not preserve the input order of equal elements in the sorted output. It is generally slower than other O(n.log(n)) 
         sorting algorithms like quicksort, merge sort.
         
         
The heapsort algorithm can be divided into two parts:

In the first step, a heap is built out of the input data. We can do this in O(n) time.
In the second step, a sorted array is created by repeatedly removing the largest/smallest element from the heap (the root of the heap) and inserting it into 
the array. The heap is updated (heapify-down is called on the root node) after each removal to maintain the heap property. Once all elements have been removed 
from the heap, we get a sorted array. This is done in O(n.log(n)) time since we need to pop n elements, where each removal involves a constant amount of work
and a single heapify operation takes O(log(n)) time.

How to build a heap?
A naive solution would be to start with an empty heap and repeatedly insert each element of the input list into it. The problem with this approach is that it runs 
in O(n.log(n)) time on an input containing n elements, as it performs n insertions at O(log(n)) cost each.
We can build a heap in O(n) time by arbitrarily putting the input elements into a heap array. Then starting from the last internal node of the heap (present at 
index (n-2)/2 in the array), call the heapify procedure on each node up to the root node (till index 0). As the heapify procedure expects a node’s left and right 
child to be heaps, start from the last internal node (as leaf nodes are already heaps) and move up level by level.
One can argue that the basic heap operation of heapify runs in O(log(n)) time, and we call heapify roughly n/2 times (one for each internal node). So, the time complexity
of the above solution is O(n.log(n)). However, it turns out that the analysis is not tight.
When heapify is called, the running time depends on how far an element might move down in the tree before the process terminates. In other words, it depends on the height 
of the element in a heap. In the worst-case, the element might go down to the leaf level. Let’s count the work done level by level.
There are 2h nodes at the bottom-most level, but we do not call heapify on any of these, so the work is 0.
There are 2(h-1) nodes at the next level, and each might move down by 1 level.
At the 3rd level from the bottom, there are 2(h-2) nodes, and each might move down by 2 levels and do on…
As we can see, not all heapify operations are O(log(n)), and this is why, by doing tight analysis, we might end up getting O(n) time.

code solution:

import java.util.Arrays;
 
class Main
{
    // return left child of `A[i]`
    private static int LEFT(int i) {
        return (2*i + 1);
    }
 
    // return right child of `A[i]`
    private static int RIGHT(int i) {
        return (2*i + 2);
    }
 
    // Utility function to swap two indices in the array
    private static void swap(int[] A, int i, int j)
    {
        int temp = A[i];
        A[i] = A[j];
        A[j] = temp;
    }
 
    // Recursive heapify-down algorithm. The node at index `i` and
    // its two direct children violates the heap property
    private static void heapify(int[] A, int i, int size)
    {
        // get left and right child of node at index `i`
        int left = LEFT(i);
        int right = RIGHT(i);
 
        int largest = i;
 
        // compare `A[i]` with its left and right child
        // and find the largest value
        if (left < size && A[left] > A[i]) {
            largest = left;
        }
 
        if (right < size && A[right] > A[largest]) {
            largest = right;
        }
 
        // swap with a child having greater value and
        // call heapify-down on the child
        if (largest != i)
        {
            swap(A, i, largest);
            heapify(A, largest, size);
        }
    }
 
    // Function to remove an element with the highest priority (present at the root)
    public static int pop(int[] A, int size)
    {
        // if the heap has no elements
        if (size <= 0) {
            return -1;
        }
 
        int top = A[0];
 
        // replace the root of the heap with the last element
        // of the array
        A[0] = A[size-1];
 
        // call heapify-down on the root node
        heapify(A, 0, size - 1);
 
        return top;
    }
 
    // Function to perform heapsort on array `A` of size `n`
    public static void heapsort(int[] A)
    {
        // build a priority queue and initialize it by the given array
        int n = A.length;
 
        // Build-heap: Call heapify starting from the last internal
        // node all the way up to the root node
        int i = (n - 2) / 2;
        while (i >= 0) {
            heapify(A, i--, n);
        }
 
        // repeatedly pop from the heap till it becomes empty
        while (n > 0)
        {
            A[n - 1] = pop(A, n);
            n--;
        }
    }
 
    // Heapsort algorithm implementation in Java
    public static void main(String[] args)
    {
        int[] A = { 6, 4, 7, 1, 9, -2 };
 
        // perform heapsort on the array
        heapsort(A);
 
        // print the sorted array
        System.out.println(Arrays.toString(A));
    }
}
